
import java.io.FileNotFoundException;
import static java.lang.String.valueOf;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
    
/**
 *
 * @author user
 */
public class TableDijkstra extends javax.swing.JFrame {
     static int startIn;
     static int stopIn;
     int rowSelected;
     ArrayList <Edge_> Edge_s;
     ArrayList <Edge> edges ;
     PreInput pi ;
     String inputStart ;
     String inputStop;
     Edge temp;
     boolean checkSaved = false;
    private ArrayList<Vertex> v;
    private String pathGraph;
    ArrayList <String> T;
    public TableDijkstra() {
        T = new ArrayList<String>();
        initComponents();
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Dijkstra = new javax.swing.JLabel();
        vertexStop = new javax.swing.JLabel();
        stopInput = new javax.swing.JTextField();
        vertexStart = new javax.swing.JLabel();
        startInput = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        run = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Dijkstra.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Dijkstra.setText("Dijkstra's Algorithm");

        vertexStop.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        vertexStop.setText("Vertex Stop");

        stopInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopInputActionPerformed(evt);
            }
        });

        vertexStart.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        vertexStart.setText("Vertex Start");

        startInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startInputActionPerformed(evt);
            }
        });

        run.setText("Run");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(run, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(run, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(vertexStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(vertexStop)
                .addGap(114, 114, 114))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(startInput, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stopInput, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(Dijkstra))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(253, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(Dijkstra)
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vertexStop)
                    .addComponent(vertexStart))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startInputActionPerformed
        
    private void stopInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopInputActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        // TODO add your handling code here:
        
        
        Vertex temp ;
        pi = new PreInput(Edge_s);
        edges = new ArrayList<Edge>();
        for(int i=0;i<pi.fromNodeIndex.length;i++){
            edges.add(new Edge (pi.fromNodeIndex[i],pi.toNodeIndex[i],pi.length[i],pi.nameFrom[i],pi.nameTo[i]));
 
            edges.get(i).setVertexInfo(v);
        }
        inputStart = startInput.getText();
        inputStop = stopInput.getText();
        boolean startCorrect = false;
        boolean stopCorrect = false;
           
            for (int i = 0; i < edges.get(0).v.size(); i++) {
            if(edges.get(0).v.get(i).name.equals(inputStart)){
                startCorrect = true;
            }
            if(edges.get(0).v.get(i).name.equals(inputStop)){
                stopCorrect = true;
            } 
            }
          //  System.out.println(inputStart+" : "+inputStop);
            
        
        
        if(startCorrect!=true||stopCorrect!=true){
            JOptionPane.showMessageDialog(this,"Wrong Vertex!! Please enter Vertex again.");
        }     
        else{
            Graph g = new Graph(edges);
            g.setT(T);
            g.setStartVertex(inputStart);
            g.calculateShortesDistances();
            g.printResult();
            g.findEndLength(inputStop);
            g.printGraphUpdate();
            //
            Table T = new Table(g.ans, g.getNoOfNodes(), valueOf(g.pathAns + "" + g.dist),g.graphUpdated);
            T.setVisible(true);
            GraphAns gA = null;
            try {
                gA = new GraphAns();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TableDijkstra.class.getName()).log(Level.SEVERE, null, ex);
            }
            gA.setVisible(false);
            String x[] = valueOf(g.pathAns).toString().split(",");
            for (int i = 0; i < Edge_s.size(); i++) {
                for (int j = 0; j < x.length; j++) {
                    Edge_s.get(i).ansLine = x;
                 //   System.out.println(Edge_s.get(i).ansLine[j]);
                }

            }

            gA.setEdge_(Edge_s);
            gA.setVertex(v);
            gA.setPathGraph(pathGraph);
            try {
                gA.open(pathGraph);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TableDijkstra.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                gA.setLineAns(valueOf(g.pathAns));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TableDijkstra.class.getName()).log(Level.SEVERE, null, ex);
            }
            gA.draw();
            gA.setVisible(true);
        }
        
        
    
    }//GEN-LAST:event_runActionPerformed
    public void setPreInput(PreInput pi){
        this.pi = pi;
    }
    public void addToGraph(){
        for(int i=0;i<pi.fromNodeIndex.length;i++){
             edges.add(new Edge(pi.fromNodeIndex[i],pi.toNodeIndex[i],pi.length[i]));
        }
        
    }
    public void setEdge(ArrayList <Edge_> Edge_s){
        this.Edge_s = Edge_s;
    }
    public void setVertexInfo(ArrayList <Vertex> v){
        this.v = v;
    }
    public void setPathGraph(String pathGraph){
        this.pathGraph = pathGraph;
        
    }
    public void setT(ArrayList <String> T){
       this.T = T;
   }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableDijkstra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableDijkstra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableDijkstra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableDijkstra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TableDijkstra().setVisible(true);
                 
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dijkstra;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton run;
    private javax.swing.JTextField startInput;
    private javax.swing.JTextField stopInput;
    private javax.swing.JLabel vertexStart;
    private javax.swing.JLabel vertexStop;
    // End of variables declaration//GEN-END:variables

}
